{"version":3,"sources":["routes/Counter/modules/counter.js","routes/Counter/components/Counter.less","routes/Counter/components/Counter.js","routes/Counter/containers/CounterContainer.js"],"names":["COUNTER_INCREMENT","COUNTER_DOUBLE_ASYNC","increment","value","arguments","length","undefined","type","payload","doubleAsync","dispatch","getState","Promise","resolve","setTimeout","counter","actions","ACTION_HANDLERS","_ACTION_HANDLERS","Object","_Users_sunmengge_Documents_SourceCode_react_tmall_sp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","state","action","initialState","counterReducer","handler","module","exports","counterContainer","Counter","_ref","react_default","a","createElement","className","Styles","onClick","mapDispatchToProps","connect"],"mappings":"gXAGaA,EAAoB,oBACpBC,EAAuB,uBAK7B,SAASC,IAAsB,IAAXC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACjC,MAAO,CACLG,KAAUP,EACVQ,QAAUL,GAQP,IAAMM,EAAc,WACzB,OAAO,SAACC,EAAUC,GAChB,OAAO,IAAIC,QAAQ,SAACC,GAClBC,WAAW,WACTJ,EAAS,CACPH,KAAUN,EACVO,QAAUG,IAAWI,UAEvBF,KACC,SAKIG,EAAU,CACrBd,YACAO,eAMIQ,GAAeC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EAClBlB,EAAwB,SAACqB,EAAOC,GAAR,OAAmBD,EAAQC,EAAOd,UADxCW,OAAAC,EAAA,EAAAD,CAAAD,EAElBjB,EAAwB,SAACoB,EAAOC,GAAR,OAA2B,EAARD,IAFzBH,GAQfK,EAAe,EACN,SAASC,IAA8C,IAA9BH,EAA8BjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBmB,EAAcD,EAAQlB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9DmB,EAAUR,EAAgBK,EAAOf,MAEvC,OAAOkB,EAAUA,EAAQJ,EAAOC,GAAUD,wBCrD5CK,EAAAC,QAAA,CAAkBC,iBAAA,oICqBHC,EAlBQ,SAAAC,GAAA,IAAGf,EAAHe,EAAGf,QAASb,EAAZ4B,EAAY5B,UAAWO,EAAvBqB,EAAuBrB,YAAvB,OACrBsB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOP,kBACrBG,EAAAC,EAAAC,cAAA,sBAAclB,GACdgB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBE,QAASlC,GAA7C,aAGC,IACD6B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBE,QAAS3B,GAA/C,oBCGE4B,EAAqB,CACzBnC,UAAY,kBAAMA,oBAAU,IAC5BO,2BAqBa6B,sBAlBS,SAACjB,GAAD,MAAY,CAClCN,QAAUM,EAAMN,UAiBsBsB,EAAzBC,CAA6CT","file":"static/js/counter.fe006855.chunk.js","sourcesContent":["// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\nexport const COUNTER_DOUBLE_ASYNC = 'COUNTER_DOUBLE_ASYNC'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk! */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch({\n          type    : COUNTER_DOUBLE_ASYNC,\n          payload : getState().counter\n        })\n        resolve()\n      }, 200)\n    })\n  }\n}\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT]    : (state, action) => state + action.payload,\n  [COUNTER_DOUBLE_ASYNC] : (state, action) => state * 2\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter__counterContainer--1Rg-2\"};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Styles from './Counter.less';\n\nexport const Counter = ({ counter, increment, doubleAsync }) => (\n  <div className={Styles.counterContainer}>\n    <h2>Counter: {counter}</h2>\n    <button className='btn btn-primary' onClick={increment}>\n      Increment\n    </button>\n    {' '}\n    <button className='btn btn-secondary' onClick={doubleAsync}>\n      Double (Async)\n    </button>\n  </div>\n)\nCounter.propTypes = {\n  counter: PropTypes.number.isRequired,\n  increment: PropTypes.func.isRequired,\n  doubleAsync: PropTypes.func.isRequired,\n}\n\nexport default Counter\n","import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/counter'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Counter from '../components/Counter'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync\n}\n\nconst mapStateToProps = (state) => ({\n  counter : state.counter\n})\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n"],"sourceRoot":""}